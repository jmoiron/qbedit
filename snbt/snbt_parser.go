package snbt

// Code generated by peg -switch -inline -strict -output snbt/snbt_parser.go snbt/snbt.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleStart
	ruleValue
	ruleCompound
	rulePair
	ruleList
	ruleListItem
	ruleKey
	ruleString
	ruleStringInner
	ruleEscape
	ruleUnicode
	ruleHex
	ruleUnquoted
	ruleDecimal
	ruleFloatS
	ruleLong
	ruleShort
	ruleBoolean
	ruleLBRACE
	ruleRBRACE
	ruleLBRACKET
	ruleRBRACKET
	ruleCOLON
	ruleCOMMA
	ruleDQUOTE
	rulePairSep
	ruleListSep
	rule_
	ruleWS
	ruleWSP
	ruleEOL
	ruleComment
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	rulePegText
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
)

var rul3s = [...]string{
	"Unknown",
	"Start",
	"Value",
	"Compound",
	"Pair",
	"List",
	"ListItem",
	"Key",
	"String",
	"StringInner",
	"Escape",
	"Unicode",
	"Hex",
	"Unquoted",
	"Decimal",
	"FloatS",
	"Long",
	"Short",
	"Boolean",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"COLON",
	"COMMA",
	"DQUOTE",
	"PairSep",
	"ListSep",
	"_",
	"WS",
	"WSP",
	"EOL",
	"Comment",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"PegText",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type SNBT struct {
	Builder

	Buffer string
	buffer []rune
	rules  [47]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *SNBT) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *SNBT) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *SNBT
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *SNBT) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *SNBT) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *SNBT) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *SNBT) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.BeginCompound()
		case ruleAction1:
			p.PairSet()
		case ruleAction2:
			p.BeginList()
		case ruleAction3:
			p.ListAppend()
		case ruleAction4:
			p.SetKey(text)
		case ruleAction5:
			p.PushString(text)
		case ruleAction6:
			p.PushUnquoted(text)
		case ruleAction7:
			p.PushDecimal(text)
		case ruleAction8:
			p.PushFloat(text)
		case ruleAction9:
			p.PushLong(text)
		case ruleAction10:
			p.PushShort(text)
		case ruleAction11:
			p.PushBool(true)
		case ruleAction12:
			p.PushBool(false)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*SNBT) error {
	return func(p *SNBT) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*SNBT) error {
	return func(p *SNBT) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *SNBT) Init(options ...func(*SNBT) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Start <- <(_ Value _ !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rule_]() {
					goto l0
				}
				if !_rules[ruleValue]() {
					goto l0
				}
				if !_rules[rule_]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					if !matchDot() {
						goto l2
					}
					goto l0
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
				add(ruleStart, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Value <- <(Compound / List / String / Boolean / Decimal / FloatS / Long / Short / Unquoted)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				{
					position5, tokenIndex5 := position, tokenIndex
					{
						position7 := position
						{
							position8 := position
							if buffer[position] != rune('{') {
								goto l6
							}
							position++
							if !_rules[ruleWSP]() {
								goto l6
							}
							add(ruleLBRACE, position8)
						}
						{
							add(ruleAction0, position)
						}
						{
							position10, tokenIndex10 := position, tokenIndex
							{
								position12, tokenIndex12 := position, tokenIndex
								if !_rules[rulePairSep]() {
									goto l12
								}
								goto l13
							l12:
								position, tokenIndex = position12, tokenIndex12
							}
						l13:
							if !_rules[rulePair]() {
								goto l10
							}
						l14:
							{
								position15, tokenIndex15 := position, tokenIndex
								if !_rules[rulePairSep]() {
									goto l15
								}
								if !_rules[rulePair]() {
									goto l15
								}
								goto l14
							l15:
								position, tokenIndex = position15, tokenIndex15
							}
							goto l11
						l10:
							position, tokenIndex = position10, tokenIndex10
						}
					l11:
						{
							position16, tokenIndex16 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l16
							}
						l18:
							{
								position19, tokenIndex19 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l19
								}
								goto l18
							l19:
								position, tokenIndex = position19, tokenIndex19
							}
							if !_rules[ruleWSP]() {
								goto l16
							}
							goto l17
						l16:
							position, tokenIndex = position16, tokenIndex16
						}
					l17:
						{
							position20 := position
							if buffer[position] != rune('}') {
								goto l6
							}
							position++
							if !_rules[ruleWSP]() {
								goto l6
							}
							add(ruleRBRACE, position20)
						}
						add(ruleCompound, position7)
					}
					goto l5
				l6:
					position, tokenIndex = position5, tokenIndex5
					{
						position22 := position
						{
							position23 := position
							if buffer[position] != rune('[') {
								goto l21
							}
							position++
							if !_rules[ruleWSP]() {
								goto l21
							}
							add(ruleLBRACKET, position23)
						}
						{
							add(ruleAction2, position)
						}
						{
							position25, tokenIndex25 := position, tokenIndex
							{
								position27, tokenIndex27 := position, tokenIndex
								if !_rules[ruleListSep]() {
									goto l27
								}
								goto l28
							l27:
								position, tokenIndex = position27, tokenIndex27
							}
						l28:
							if !_rules[ruleListItem]() {
								goto l25
							}
						l29:
							{
								position30, tokenIndex30 := position, tokenIndex
								if !_rules[ruleListSep]() {
									goto l30
								}
								if !_rules[ruleListItem]() {
									goto l30
								}
								goto l29
							l30:
								position, tokenIndex = position30, tokenIndex30
							}
							goto l26
						l25:
							position, tokenIndex = position25, tokenIndex25
						}
					l26:
						{
							position31, tokenIndex31 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l31
							}
						l33:
							{
								position34, tokenIndex34 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l34
								}
								goto l33
							l34:
								position, tokenIndex = position34, tokenIndex34
							}
							if !_rules[ruleWSP]() {
								goto l31
							}
							goto l32
						l31:
							position, tokenIndex = position31, tokenIndex31
						}
					l32:
						{
							position35 := position
							if buffer[position] != rune(']') {
								goto l21
							}
							position++
							if !_rules[ruleWSP]() {
								goto l21
							}
							add(ruleRBRACKET, position35)
						}
						add(ruleList, position22)
					}
					goto l5
				l21:
					position, tokenIndex = position5, tokenIndex5
					{
						position37 := position
						if !_rules[ruleDQUOTE]() {
							goto l36
						}
						{
							position38 := position
							if !_rules[ruleStringInner]() {
								goto l36
							}
							add(rulePegText, position38)
						}
						if !_rules[ruleDQUOTE]() {
							goto l36
						}
						if !_rules[ruleWSP]() {
							goto l36
						}
						{
							add(ruleAction5, position)
						}
						add(ruleString, position37)
					}
					goto l5
				l36:
					position, tokenIndex = position5, tokenIndex5
					{
						position41 := position
						{
							position42, tokenIndex42 := position, tokenIndex
							{
								position44, tokenIndex44 := position, tokenIndex
								if buffer[position] != rune('t') {
									goto l45
								}
								position++
								goto l44
							l45:
								position, tokenIndex = position44, tokenIndex44
								if buffer[position] != rune('T') {
									goto l43
								}
								position++
							}
						l44:
							{
								position46, tokenIndex46 := position, tokenIndex
								if buffer[position] != rune('r') {
									goto l47
								}
								position++
								goto l46
							l47:
								position, tokenIndex = position46, tokenIndex46
								if buffer[position] != rune('R') {
									goto l43
								}
								position++
							}
						l46:
							{
								position48, tokenIndex48 := position, tokenIndex
								if buffer[position] != rune('u') {
									goto l49
								}
								position++
								goto l48
							l49:
								position, tokenIndex = position48, tokenIndex48
								if buffer[position] != rune('U') {
									goto l43
								}
								position++
							}
						l48:
							{
								position50, tokenIndex50 := position, tokenIndex
								if buffer[position] != rune('e') {
									goto l51
								}
								position++
								goto l50
							l51:
								position, tokenIndex = position50, tokenIndex50
								if buffer[position] != rune('E') {
									goto l43
								}
								position++
							}
						l50:
							{
								add(ruleAction11, position)
							}
							goto l42
						l43:
							position, tokenIndex = position42, tokenIndex42
							{
								position53, tokenIndex53 := position, tokenIndex
								if buffer[position] != rune('f') {
									goto l54
								}
								position++
								goto l53
							l54:
								position, tokenIndex = position53, tokenIndex53
								if buffer[position] != rune('F') {
									goto l40
								}
								position++
							}
						l53:
							{
								position55, tokenIndex55 := position, tokenIndex
								if buffer[position] != rune('a') {
									goto l56
								}
								position++
								goto l55
							l56:
								position, tokenIndex = position55, tokenIndex55
								if buffer[position] != rune('A') {
									goto l40
								}
								position++
							}
						l55:
							{
								position57, tokenIndex57 := position, tokenIndex
								if buffer[position] != rune('l') {
									goto l58
								}
								position++
								goto l57
							l58:
								position, tokenIndex = position57, tokenIndex57
								if buffer[position] != rune('L') {
									goto l40
								}
								position++
							}
						l57:
							{
								position59, tokenIndex59 := position, tokenIndex
								if buffer[position] != rune('s') {
									goto l60
								}
								position++
								goto l59
							l60:
								position, tokenIndex = position59, tokenIndex59
								if buffer[position] != rune('S') {
									goto l40
								}
								position++
							}
						l59:
							{
								position61, tokenIndex61 := position, tokenIndex
								if buffer[position] != rune('e') {
									goto l62
								}
								position++
								goto l61
							l62:
								position, tokenIndex = position61, tokenIndex61
								if buffer[position] != rune('E') {
									goto l40
								}
								position++
							}
						l61:
							{
								add(ruleAction12, position)
							}
						}
					l42:
						if !_rules[ruleWSP]() {
							goto l40
						}
						add(ruleBoolean, position41)
					}
					goto l5
				l40:
					position, tokenIndex = position5, tokenIndex5
					{
						position65 := position
						{
							position66 := position
							{
								position69, tokenIndex69 := position, tokenIndex
								if c := buffer[position]; c < rune('+') || c > rune(']') {
									goto l70
								}
								position++
								goto l69
							l70:
								position, tokenIndex = position69, tokenIndex69
								{
									switch buffer[position] {
									case '[':
										if buffer[position] != rune('[') {
											goto l64
										}
										position++
									case ' ':
										if buffer[position] != rune(' ') {
											goto l64
										}
										position++
									case '?':
										if buffer[position] != rune('?') {
											goto l64
										}
										position++
									default:
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l64
										}
										position++
									}
								}

							}
						l69:
						l67:
							{
								position68, tokenIndex68 := position, tokenIndex
								{
									position72, tokenIndex72 := position, tokenIndex
									if c := buffer[position]; c < rune('+') || c > rune(']') {
										goto l73
									}
									position++
									goto l72
								l73:
									position, tokenIndex = position72, tokenIndex72
									{
										switch buffer[position] {
										case '[':
											if buffer[position] != rune('[') {
												goto l68
											}
											position++
										case ' ':
											if buffer[position] != rune(' ') {
												goto l68
											}
											position++
										case '?':
											if buffer[position] != rune('?') {
												goto l68
											}
											position++
										default:
											if c := buffer[position]; c < rune('0') || c > rune('9') {
												goto l68
											}
											position++
										}
									}

								}
							l72:
								goto l67
							l68:
								position, tokenIndex = position68, tokenIndex68
							}
							{
								position75, tokenIndex75 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l75
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l75
								}
								position++
							l77:
								{
									position78, tokenIndex78 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l78
									}
									position++
									goto l77
								l78:
									position, tokenIndex = position78, tokenIndex78
								}
								goto l76
							l75:
								position, tokenIndex = position75, tokenIndex75
							}
						l76:
							{
								position79, tokenIndex79 := position, tokenIndex
								if buffer[position] != rune('d') {
									goto l80
								}
								position++
								goto l79
							l80:
								position, tokenIndex = position79, tokenIndex79
								if buffer[position] != rune('D') {
									goto l64
								}
								position++
							}
						l79:
							add(rulePegText, position66)
						}
						if !_rules[ruleWSP]() {
							goto l64
						}
						{
							add(ruleAction7, position)
						}
						add(ruleDecimal, position65)
					}
					goto l5
				l64:
					position, tokenIndex = position5, tokenIndex5
					{
						position83 := position
						{
							position84 := position
							{
								position87, tokenIndex87 := position, tokenIndex
								if c := buffer[position]; c < rune('+') || c > rune(']') {
									goto l88
								}
								position++
								goto l87
							l88:
								position, tokenIndex = position87, tokenIndex87
								{
									switch buffer[position] {
									case '[':
										if buffer[position] != rune('[') {
											goto l82
										}
										position++
									case ' ':
										if buffer[position] != rune(' ') {
											goto l82
										}
										position++
									case '?':
										if buffer[position] != rune('?') {
											goto l82
										}
										position++
									default:
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l82
										}
										position++
									}
								}

							}
						l87:
						l85:
							{
								position86, tokenIndex86 := position, tokenIndex
								{
									position90, tokenIndex90 := position, tokenIndex
									if c := buffer[position]; c < rune('+') || c > rune(']') {
										goto l91
									}
									position++
									goto l90
								l91:
									position, tokenIndex = position90, tokenIndex90
									{
										switch buffer[position] {
										case '[':
											if buffer[position] != rune('[') {
												goto l86
											}
											position++
										case ' ':
											if buffer[position] != rune(' ') {
												goto l86
											}
											position++
										case '?':
											if buffer[position] != rune('?') {
												goto l86
											}
											position++
										default:
											if c := buffer[position]; c < rune('0') || c > rune('9') {
												goto l86
											}
											position++
										}
									}

								}
							l90:
								goto l85
							l86:
								position, tokenIndex = position86, tokenIndex86
							}
							{
								position93, tokenIndex93 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l93
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l93
								}
								position++
							l95:
								{
									position96, tokenIndex96 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l96
									}
									position++
									goto l95
								l96:
									position, tokenIndex = position96, tokenIndex96
								}
								goto l94
							l93:
								position, tokenIndex = position93, tokenIndex93
							}
						l94:
							{
								position97, tokenIndex97 := position, tokenIndex
								if buffer[position] != rune('f') {
									goto l98
								}
								position++
								goto l97
							l98:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('F') {
									goto l82
								}
								position++
							}
						l97:
							add(rulePegText, position84)
						}
						if !_rules[ruleWSP]() {
							goto l82
						}
						{
							add(ruleAction8, position)
						}
						add(ruleFloatS, position83)
					}
					goto l5
				l82:
					position, tokenIndex = position5, tokenIndex5
					{
						position101 := position
						{
							position102 := position
							{
								position105, tokenIndex105 := position, tokenIndex
								if c := buffer[position]; c < rune('+') || c > rune(']') {
									goto l106
								}
								position++
								goto l105
							l106:
								position, tokenIndex = position105, tokenIndex105
								{
									switch buffer[position] {
									case '[':
										if buffer[position] != rune('[') {
											goto l100
										}
										position++
									case ' ':
										if buffer[position] != rune(' ') {
											goto l100
										}
										position++
									case '?':
										if buffer[position] != rune('?') {
											goto l100
										}
										position++
									default:
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l100
										}
										position++
									}
								}

							}
						l105:
						l103:
							{
								position104, tokenIndex104 := position, tokenIndex
								{
									position108, tokenIndex108 := position, tokenIndex
									if c := buffer[position]; c < rune('+') || c > rune(']') {
										goto l109
									}
									position++
									goto l108
								l109:
									position, tokenIndex = position108, tokenIndex108
									{
										switch buffer[position] {
										case '[':
											if buffer[position] != rune('[') {
												goto l104
											}
											position++
										case ' ':
											if buffer[position] != rune(' ') {
												goto l104
											}
											position++
										case '?':
											if buffer[position] != rune('?') {
												goto l104
											}
											position++
										default:
											if c := buffer[position]; c < rune('0') || c > rune('9') {
												goto l104
											}
											position++
										}
									}

								}
							l108:
								goto l103
							l104:
								position, tokenIndex = position104, tokenIndex104
							}
							{
								position111, tokenIndex111 := position, tokenIndex
								if buffer[position] != rune('l') {
									goto l112
								}
								position++
								goto l111
							l112:
								position, tokenIndex = position111, tokenIndex111
								if buffer[position] != rune('L') {
									goto l100
								}
								position++
							}
						l111:
							add(rulePegText, position102)
						}
						if !_rules[ruleWSP]() {
							goto l100
						}
						{
							add(ruleAction9, position)
						}
						add(ruleLong, position101)
					}
					goto l5
				l100:
					position, tokenIndex = position5, tokenIndex5
					{
						position115 := position
						{
							position116 := position
							{
								position119, tokenIndex119 := position, tokenIndex
								if c := buffer[position]; c < rune('+') || c > rune(']') {
									goto l120
								}
								position++
								goto l119
							l120:
								position, tokenIndex = position119, tokenIndex119
								{
									switch buffer[position] {
									case '[':
										if buffer[position] != rune('[') {
											goto l114
										}
										position++
									case ' ':
										if buffer[position] != rune(' ') {
											goto l114
										}
										position++
									case '?':
										if buffer[position] != rune('?') {
											goto l114
										}
										position++
									default:
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l114
										}
										position++
									}
								}

							}
						l119:
						l117:
							{
								position118, tokenIndex118 := position, tokenIndex
								{
									position122, tokenIndex122 := position, tokenIndex
									if c := buffer[position]; c < rune('+') || c > rune(']') {
										goto l123
									}
									position++
									goto l122
								l123:
									position, tokenIndex = position122, tokenIndex122
									{
										switch buffer[position] {
										case '[':
											if buffer[position] != rune('[') {
												goto l118
											}
											position++
										case ' ':
											if buffer[position] != rune(' ') {
												goto l118
											}
											position++
										case '?':
											if buffer[position] != rune('?') {
												goto l118
											}
											position++
										default:
											if c := buffer[position]; c < rune('0') || c > rune('9') {
												goto l118
											}
											position++
										}
									}

								}
							l122:
								goto l117
							l118:
								position, tokenIndex = position118, tokenIndex118
							}
							{
								position125, tokenIndex125 := position, tokenIndex
								if buffer[position] != rune('s') {
									goto l126
								}
								position++
								goto l125
							l126:
								position, tokenIndex = position125, tokenIndex125
								if buffer[position] != rune('S') {
									goto l114
								}
								position++
							}
						l125:
							add(rulePegText, position116)
						}
						if !_rules[ruleWSP]() {
							goto l114
						}
						{
							add(ruleAction10, position)
						}
						add(ruleShort, position115)
					}
					goto l5
				l114:
					position, tokenIndex = position5, tokenIndex5
					{
						position128 := position
						{
							position129 := position
							{
								position132, tokenIndex132 := position, tokenIndex
								{
									switch buffer[position] {
									case '\t':
										if buffer[position] != rune('\t') {
											goto l132
										}
										position++
									case '\r':
										if buffer[position] != rune('\r') {
											goto l132
										}
										position++
									case '\n':
										if buffer[position] != rune('\n') {
											goto l132
										}
										position++
									case ' ':
										if buffer[position] != rune(' ') {
											goto l132
										}
										position++
									case ':':
										if buffer[position] != rune(':') {
											goto l132
										}
										position++
									case ',':
										if buffer[position] != rune(',') {
											goto l132
										}
										position++
									case ']':
										if buffer[position] != rune(']') {
											goto l132
										}
										position++
									default:
										if buffer[position] != rune('}') {
											goto l132
										}
										position++
									}
								}

								goto l3
							l132:
								position, tokenIndex = position132, tokenIndex132
							}
							if !matchDot() {
								goto l3
							}
						l130:
							{
								position131, tokenIndex131 := position, tokenIndex
								{
									position134, tokenIndex134 := position, tokenIndex
									{
										switch buffer[position] {
										case '\t':
											if buffer[position] != rune('\t') {
												goto l134
											}
											position++
										case '\r':
											if buffer[position] != rune('\r') {
												goto l134
											}
											position++
										case '\n':
											if buffer[position] != rune('\n') {
												goto l134
											}
											position++
										case ' ':
											if buffer[position] != rune(' ') {
												goto l134
											}
											position++
										case ':':
											if buffer[position] != rune(':') {
												goto l134
											}
											position++
										case ',':
											if buffer[position] != rune(',') {
												goto l134
											}
											position++
										case ']':
											if buffer[position] != rune(']') {
												goto l134
											}
											position++
										default:
											if buffer[position] != rune('}') {
												goto l134
											}
											position++
										}
									}

									goto l131
								l134:
									position, tokenIndex = position134, tokenIndex134
								}
								if !matchDot() {
									goto l131
								}
								goto l130
							l131:
								position, tokenIndex = position131, tokenIndex131
							}
							add(rulePegText, position129)
						}
						if !_rules[ruleWSP]() {
							goto l3
						}
						{
							add(ruleAction6, position)
						}
						add(ruleUnquoted, position128)
					}
				}
			l5:
				add(ruleValue, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 Compound <- <(LBRACE Action0 (PairSep? Pair (PairSep Pair)*)? (EOL+ WSP)? RBRACE)> */
		nil,
		/* 3 Pair <- <(Key COLON Value Action1)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				if !_rules[ruleKey]() {
					goto l138
				}
				{
					position140 := position
					if buffer[position] != rune(':') {
						goto l138
					}
					position++
					if !_rules[ruleWSP]() {
						goto l138
					}
					add(ruleCOLON, position140)
				}
				if !_rules[ruleValue]() {
					goto l138
				}
				{
					add(ruleAction1, position)
				}
				add(rulePair, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 4 List <- <(LBRACKET Action2 (ListSep? ListItem (ListSep ListItem)*)? (EOL+ WSP)? RBRACKET)> */
		nil,
		/* 5 ListItem <- <(WSP Value Action3)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if !_rules[ruleWSP]() {
					goto l143
				}
				if !_rules[ruleValue]() {
					goto l143
				}
				{
					add(ruleAction3, position)
				}
				add(ruleListItem, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 6 Key <- <((<(((&('_') '_') | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z])) ((&('.') '.') | (&('-') '-') | (&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]))*)> / (DQUOTE <StringInner> DQUOTE)) Action4)> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				{
					position148, tokenIndex148 := position, tokenIndex
					{
						position150 := position
						{
							switch buffer[position] {
							case '_':
								if buffer[position] != rune('_') {
									goto l149
								}
								position++
							case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l149
								}
								position++
							default:
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l149
								}
								position++
							}
						}

					l152:
						{
							position153, tokenIndex153 := position, tokenIndex
							{
								switch buffer[position] {
								case '.':
									if buffer[position] != rune('.') {
										goto l153
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l153
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l153
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l153
									}
									position++
								case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l153
									}
									position++
								default:
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l153
									}
									position++
								}
							}

							goto l152
						l153:
							position, tokenIndex = position153, tokenIndex153
						}
						add(rulePegText, position150)
					}
					goto l148
				l149:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleDQUOTE]() {
						goto l146
					}
					{
						position155 := position
						if !_rules[ruleStringInner]() {
							goto l146
						}
						add(rulePegText, position155)
					}
					if !_rules[ruleDQUOTE]() {
						goto l146
					}
				}
			l148:
				{
					add(ruleAction4, position)
				}
				add(ruleKey, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 7 String <- <(DQUOTE <StringInner> DQUOTE WSP Action5)> */
		nil,
		/* 8 StringInner <- <(Escape / (!'"' .))*> */
		func() bool {
			{
				position159 := position
			l160:
				{
					position161, tokenIndex161 := position, tokenIndex
					{
						position162, tokenIndex162 := position, tokenIndex
						{
							position164 := position
							{
								position165, tokenIndex165 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l166
								}
								position++
								{
									switch buffer[position] {
									case 't':
										if buffer[position] != rune('t') {
											goto l166
										}
										position++
									case 'r':
										if buffer[position] != rune('r') {
											goto l166
										}
										position++
									case 'n':
										if buffer[position] != rune('n') {
											goto l166
										}
										position++
									case 'f':
										if buffer[position] != rune('f') {
											goto l166
										}
										position++
									case 'b':
										if buffer[position] != rune('b') {
											goto l166
										}
										position++
									case '/':
										if buffer[position] != rune('/') {
											goto l166
										}
										position++
									case '"':
										if buffer[position] != rune('"') {
											goto l166
										}
										position++
									default:
										if buffer[position] != rune('\\') {
											goto l166
										}
										position++
									}
								}

								goto l165
							l166:
								position, tokenIndex = position165, tokenIndex165
								{
									position168 := position
									if buffer[position] != rune('\\') {
										goto l163
									}
									position++
									if buffer[position] != rune('u') {
										goto l163
									}
									position++
									if !_rules[ruleHex]() {
										goto l163
									}
									if !_rules[ruleHex]() {
										goto l163
									}
									if !_rules[ruleHex]() {
										goto l163
									}
									if !_rules[ruleHex]() {
										goto l163
									}
									add(ruleUnicode, position168)
								}
							}
						l165:
							add(ruleEscape, position164)
						}
						goto l162
					l163:
						position, tokenIndex = position162, tokenIndex162
						{
							position169, tokenIndex169 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l169
							}
							position++
							goto l161
						l169:
							position, tokenIndex = position169, tokenIndex169
						}
						if !matchDot() {
							goto l161
						}
					}
				l162:
					goto l160
				l161:
					position, tokenIndex = position161, tokenIndex161
				}
				add(ruleStringInner, position159)
			}
			return true
		},
		/* 9 Escape <- <(('\\' ((&('t') 't') | (&('r') 'r') | (&('n') 'n') | (&('f') 'f') | (&('b') 'b') | (&('/') '/') | (&('"') '"') | (&('\\') '\\'))) / Unicode)> */
		nil,
		/* 10 Unicode <- <('\\' 'u' Hex Hex Hex Hex)> */
		nil,
		/* 11 Hex <- <((&('a' | 'b' | 'c' | 'd' | 'e' | 'f') [a-f]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F') [A-F]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]))> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				{
					switch buffer[position] {
					case 'a', 'b', 'c', 'd', 'e', 'f':
						if c := buffer[position]; c < rune('a') || c > rune('f') {
							goto l172
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F':
						if c := buffer[position]; c < rune('A') || c > rune('F') {
							goto l172
						}
						position++
					default:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l172
						}
						position++
					}
				}

				add(ruleHex, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 12 Unquoted <- <(<(!((&('\t') '\t') | (&('\r') '\r') | (&('\n') '\n') | (&(' ') ' ') | (&(':') ':') | (&(',') ',') | (&(']') ']') | (&('}') '}')) .)+> WSP Action6)> */
		nil,
		/* 13 Decimal <- <(<(([+-]] / ((&('[') '[') | (&(' ') ' ') | (&('?') '?') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])))+ ('.' [0-9]+)? ('d' / 'D'))> WSP Action7)> */
		nil,
		/* 14 FloatS <- <(<(([+-]] / ((&('[') '[') | (&(' ') ' ') | (&('?') '?') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])))+ ('.' [0-9]+)? ('f' / 'F'))> WSP Action8)> */
		nil,
		/* 15 Long <- <(<(([+-]] / ((&('[') '[') | (&(' ') ' ') | (&('?') '?') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])))+ ('l' / 'L'))> WSP Action9)> */
		nil,
		/* 16 Short <- <(<(([+-]] / ((&('[') '[') | (&(' ') ' ') | (&('?') '?') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])))+ ('s' / 'S'))> WSP Action10)> */
		nil,
		/* 17 Boolean <- <(((('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E') Action11) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E') Action12)) WSP)> */
		nil,
		/* 18 LBRACE <- <('{' WSP)> */
		nil,
		/* 19 RBRACE <- <('}' WSP)> */
		nil,
		/* 20 LBRACKET <- <('[' WSP)> */
		nil,
		/* 21 RBRACKET <- <(']' WSP)> */
		nil,
		/* 22 COLON <- <(':' WSP)> */
		nil,
		/* 23 COMMA <- <','> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune(',') {
					goto l186
				}
				position++
				add(ruleCOMMA, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 24 DQUOTE <- <'"'> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('"') {
					goto l188
				}
				position++
				add(ruleDQUOTE, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 25 PairSep <- <(WSP? ((COMMA WSP) / (EOL+ WSP &Key)))> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				{
					position192, tokenIndex192 := position, tokenIndex
					if !_rules[ruleWSP]() {
						goto l192
					}
					goto l193
				l192:
					position, tokenIndex = position192, tokenIndex192
				}
			l193:
				{
					position194, tokenIndex194 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l195
					}
					if !_rules[ruleWSP]() {
						goto l195
					}
					goto l194
				l195:
					position, tokenIndex = position194, tokenIndex194
					if !_rules[ruleEOL]() {
						goto l190
					}
				l196:
					{
						position197, tokenIndex197 := position, tokenIndex
						if !_rules[ruleEOL]() {
							goto l197
						}
						goto l196
					l197:
						position, tokenIndex = position197, tokenIndex197
					}
					if !_rules[ruleWSP]() {
						goto l190
					}
					{
						position198, tokenIndex198 := position, tokenIndex
						if !_rules[ruleKey]() {
							goto l190
						}
						position, tokenIndex = position198, tokenIndex198
					}
				}
			l194:
				add(rulePairSep, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 26 ListSep <- <(WSP? ((COMMA WSP) / (EOL+ WSP &Value)))> */
		func() bool {
			position199, tokenIndex199 := position, tokenIndex
			{
				position200 := position
				{
					position201, tokenIndex201 := position, tokenIndex
					if !_rules[ruleWSP]() {
						goto l201
					}
					goto l202
				l201:
					position, tokenIndex = position201, tokenIndex201
				}
			l202:
				{
					position203, tokenIndex203 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l204
					}
					if !_rules[ruleWSP]() {
						goto l204
					}
					goto l203
				l204:
					position, tokenIndex = position203, tokenIndex203
					if !_rules[ruleEOL]() {
						goto l199
					}
				l205:
					{
						position206, tokenIndex206 := position, tokenIndex
						if !_rules[ruleEOL]() {
							goto l206
						}
						goto l205
					l206:
						position, tokenIndex = position206, tokenIndex206
					}
					if !_rules[ruleWSP]() {
						goto l199
					}
					{
						position207, tokenIndex207 := position, tokenIndex
						if !_rules[ruleValue]() {
							goto l199
						}
						position, tokenIndex = position207, tokenIndex207
					}
				}
			l203:
				add(ruleListSep, position200)
			}
			return true
		l199:
			position, tokenIndex = position199, tokenIndex199
			return false
		},
		/* 27 _ <- <((&('#' | '/') Comment) | (&('\n' | '\r') EOL) | (&('\t' | ' ') WS))*> */
		func() bool {
			{
				position209 := position
			l210:
				{
					position211, tokenIndex211 := position, tokenIndex
					{
						switch buffer[position] {
						case '#', '/':
							{
								position213 := position
								{
									position214, tokenIndex214 := position, tokenIndex
									if buffer[position] != rune('#') {
										goto l215
									}
									position++
									goto l214
								l215:
									position, tokenIndex = position214, tokenIndex214
									if buffer[position] != rune('/') {
										goto l211
									}
									position++
									if buffer[position] != rune('/') {
										goto l211
									}
									position++
								}
							l214:
							l216:
								{
									position217, tokenIndex217 := position, tokenIndex
									{
										position218, tokenIndex218 := position, tokenIndex
										if !_rules[ruleEOL]() {
											goto l218
										}
										goto l217
									l218:
										position, tokenIndex = position218, tokenIndex218
									}
									if !matchDot() {
										goto l217
									}
									goto l216
								l217:
									position, tokenIndex = position217, tokenIndex217
								}
								if !_rules[ruleEOL]() {
									goto l211
								}
								add(ruleComment, position213)
							}
						case '\n', '\r':
							if !_rules[ruleEOL]() {
								goto l211
							}
						default:
							if !_rules[ruleWS]() {
								goto l211
							}
						}
					}

					goto l210
				l211:
					position, tokenIndex = position211, tokenIndex211
				}
				add(rule_, position209)
			}
			return true
		},
		/* 28 WS <- <(' ' / '\t')> */
		func() bool {
			position219, tokenIndex219 := position, tokenIndex
			{
				position220 := position
				{
					position221, tokenIndex221 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l222
					}
					position++
					goto l221
				l222:
					position, tokenIndex = position221, tokenIndex221
					if buffer[position] != rune('\t') {
						goto l219
					}
					position++
				}
			l221:
				add(ruleWS, position220)
			}
			return true
		l219:
			position, tokenIndex = position219, tokenIndex219
			return false
		},
		/* 29 WSP <- <WS*> */
		func() bool {
			{
				position224 := position
			l225:
				{
					position226, tokenIndex226 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l226
					}
					goto l225
				l226:
					position, tokenIndex = position226, tokenIndex226
				}
				add(ruleWSP, position224)
			}
			return true
		},
		/* 30 EOL <- <(('\r' '\n') / '\r' / '\n')> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				{
					position229, tokenIndex229 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l230
					}
					position++
					if buffer[position] != rune('\n') {
						goto l230
					}
					position++
					goto l229
				l230:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('\r') {
						goto l231
					}
					position++
					goto l229
				l231:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('\n') {
						goto l227
					}
					position++
				}
			l229:
				add(ruleEOL, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 31 Comment <- <(('#' / ('/' '/')) (!EOL .)* EOL)> */
		nil,
		/* 33 Action0 <- <{ p.BeginCompound() }> */
		nil,
		/* 34 Action1 <- <{ p.PairSet() }> */
		nil,
		/* 35 Action2 <- <{ p.BeginList() }> */
		nil,
		/* 36 Action3 <- <{ p.ListAppend() }> */
		nil,
		nil,
		/* 38 Action4 <- <{ p.SetKey(text) }> */
		nil,
		/* 39 Action5 <- <{ p.PushString(text) }> */
		nil,
		/* 40 Action6 <- <{ p.PushUnquoted(text) }> */
		nil,
		/* 41 Action7 <- <{ p.PushDecimal(text) }> */
		nil,
		/* 42 Action8 <- <{ p.PushFloat(text) }> */
		nil,
		/* 43 Action9 <- <{ p.PushLong(text) }> */
		nil,
		/* 44 Action10 <- <{ p.PushShort(text) }> */
		nil,
		/* 45 Action11 <- <{ p.PushBool(true) }> */
		nil,
		/* 46 Action12 <- <{ p.PushBool(false) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
